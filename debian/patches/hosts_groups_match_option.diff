Add option to match hosts/groups.
==========================================================================
--- a/noip2.c
+++ b/noip2.c
@@ -217,9 +217,9 @@
   #define UPDATE_SCRIPT		"ducupdate.php"
 
 #ifdef DEBUG
-  #define OPTCHARS		"CYU:Fc:dD:hp:u:x:SMi:K:I:z"
+  #define OPTCHARS		"CYU:Fc:dD:hp:u:x:SMi:K:I:zL:"
 #else
-  #define OPTCHARS		"CYU:Fc:hp:u:x:SMi:K:I:z"
+  #define OPTCHARS		"CYU:Fc:hp:u:x:SMi:K:I:zL:"
 #endif
 #define ARGC			1
 #define ARGF			(1<<1)
@@ -234,6 +234,8 @@
 #define ARGM			(1<<10)
 #define ARGK			(1<<11)
 #define ARGi			(1<<12)
+#define ARGL			(1<<13)
+#define MASK_ARGC               (ARGC | ARGF | ARGY | ARGU | ARGI | ARGu | ARGp | ARGx | ARGL)
 
 #define NODNSGROUP		"@@NO_GROUP@@"
 #define HOST			1
@@ -345,7 +347,7 @@
 #define CMSG99a	"to get our most recent version.\n"  
 
 #define CMSG100 \
-"Error! -C option can only be used with -F -Y -U -I -c -u -p -x options."
+"Error! -C option can only be used with -F -Y -L -U -I -c -u -p -x options."
 #define CMSG101	" Both -u and -p options must be used together."
 
 int	debug			= 	0;
@@ -390,6 +392,7 @@
 char	password[LINELEN];
 char	device[LINELEN];
 char	iface[MAX_DEVLEN];
+char    hosts_groups_list[LINELEN];
 char    dmn[LINELEN];
 char	answer[LINELEN];
 char	saved_args[LINELEN];
@@ -529,7 +532,7 @@
 void Usage()
 {
 	fprintf(stderr,  "\nUSAGE: %s ", program);
-	fprintf(stderr,  "[ -C [ -F][ -Y][ -U #min]\n\t");
+	fprintf(stderr,  "[ -C [ -F][ -Y][ -L hosts_groups][ -U #min]\n\t");
 	fprintf(stderr,  "[ -u username][ -p password][ -x progname]]\n\t");
 	fprintf(stderr,  "[ -c file]");
 #ifdef DEBUG
@@ -540,6 +543,7 @@
 	fprintf(stderr, "Options: -C               create configuration data\n");
 	fprintf(stderr, "         -F               force NAT off\n");
 	fprintf(stderr, "         -Y               select all hosts/groups\n");
+	fprintf(stderr, "         -L hosts_groups  select supplied hosts/groups\n");
 	fprintf(stderr, "         -U minutes       set update interval\n");
 	fprintf(stderr, "         -u username      use supplied username\n");
 	fprintf(stderr, "         -p password      use supplied password\n");
@@ -586,6 +590,7 @@
 	}
 	sprintf(saved_args, "%s", p);
 	*iface = 0;		// no supplied interface yet
+	*hosts_groups_list = 0; // ditto for hosts/groups
 	process_options(argc, argv);
 	if (config_filename == NULL) 
 	    config_filename = CONFIG_FILENAME;
@@ -676,8 +681,14 @@
 			break;
 		case 'Y':
 			forceyes++;
+			hosts_groups_list[0] = '\0';
 			have_args |= ARGY;
 			break;
+		case 'L':
+ 		        forceyes++;
+			strcpy(hosts_groups_list, optarg);
+		        have_args |= ARGL;
+			break;
 		case 'U':
 			update_cycle = atoi(optarg);
 			have_args |= ARGU;
@@ -747,7 +758,7 @@
 			exit(0);
 		}
 	}
-	if (needs_conf && (have_args > ((ARGx * 2) - 1))){
+	if (needs_conf && (have_args & ~MASK_ARGC)) {
 	    Msg(CMSG100);
 	    exit(1);
 	}
@@ -2006,6 +2017,30 @@
 	return strlen(buffer);
 }
 //////////////////////////////////////////////////////////////////////////
+int match(char *needle, char *haystack)
+{
+        // match needle against comma separated list of strings in haystack
+        int rc = 1; // always match for empty haystack
+        char *m = haystack;
+        size_t l = (haystack && needle)? strlen(needle):0;
+
+        while (m && *m) {
+            m = strstr(m, needle);
+            rc = 0;
+            if (m) {
+        	char t = m[l];
+
+        	// must be exact match
+        	if ((m == haystack || m[-1] == ',') && (t == '\0' || t == ',')) {
+        	    rc = 1;
+        	    break;
+        	}
+        	m = strchr(m + l, ',');
+            }
+        }
+        return rc;
+}
+//////////////////////////////////////////////////////////////////////////
 int get_update_selection(int tgrp, int thst)
 {
 	int	prompt, x, len=0;
@@ -2051,8 +2086,13 @@
 		    x = yesno(CMSG34, g->grp);
 		    if (x)
 			len = add_to_request(GROUP, g->grp);
-		} else
-		    len = add_to_request(GROUP, g->grp);
+		} else {
+		    x = match(g->grp, hosts_groups_list);
+		    if (x) {
+ 		        fprintf(stderr, "Group %s selected.\n", g->grp);
+		        len = add_to_request(GROUP, g->grp);
+		    }
+		}
 	    } else {			// just hosts without groups
 		n = g->nlink;
 		while (n) {
@@ -2060,8 +2100,13 @@
 			x = yesno(CMSG35, n->fqdn);
 		        if (x)
 			    len = add_to_request(HOST, n->fqdn);
-		    } else
-			len = add_to_request(HOST, n->fqdn);
+		    } else {
+		        x = match(n->fqdn, hosts_groups_list);
+		        if (x) {
+ 		            fprintf(stderr, "Host %s selected.\n", n->fqdn);
+			    len = add_to_request(HOST, n->fqdn);
+			}
+		    }
 		    n = n->link;
 		}
 	    }
